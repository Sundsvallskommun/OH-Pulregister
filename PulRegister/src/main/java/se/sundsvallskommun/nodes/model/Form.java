package se.sundsvallskommun.nodes.model;

/**
 * @author TimoMikkola
 *
 */


/**
 * Quick start
 * 
 * @OneToMany @ManyToOne
 * 	autoGet(true / false)
 * 	If set to true, all related data from the related table will be loaded
 * 	once object is fetched from the database to the XML.
 * 
 * 	autoAdd(true / false)
 * 	Tells the DAO to automatically add the entity upon save to the database
 * 	Tries to add entity if set to true, set to false if field is static in database
 * 
 * 	autoUpdate(true / false)
 * 	Tells the DAO to automatically update the entity
 * 	Tries to update entity if set to true, set to false if field is static in database
 *  
 * @OneToOne
 * 	The parent entity sets the child�s id to the same as the parents one
 * 	e.g no need to specify the child�s id upon creation
 * 
 * @XMLElement
 *  When XML is generated, add the attribute to the document.
 *  field name will be used if not a name is specified 
 *  
 * @DAOManaged
 * 	Used for specifying the column name of the attribute in the database
 * 	Parameter columnName used to specify column name used in the table
 * 	Parameter autoGenerated tags the column as auto incremented
 * 	 
 * @Key
 * 	Marks the field to be an ID field, needed for OH to work
 * 
 * GeneratedElementable implements toXML to allow class to be automatically generated to XML
 *  
 */

import java.io.InputStream;
import java.io.Serializable;
import java.util.Map;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import se.unlogic.hierarchy.core.interfaces.AccessInterface;
import se.unlogic.hierarchy.core.interfaces.SearchableItem;
import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.ManyToOne;
import se.unlogic.standardutils.dao.annotations.OneToOne;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.string.StringUtils;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;

@Table(name = "form")
@XMLElement
public class Form extends GeneratedElementable implements SearchableItem, Serializable, Comparable<Form> {

	private static final long serialVersionUID = 5167465509406930594L;
	
	@DAOManaged(columnName = "form_id", autoGenerated = true)
	@Key
	@XMLElement(name = "FormID")
	private Integer formID;
	
	@DAOManaged(columnName = "form_name")
	@XMLElement(name = "Name")
	@WebPopulate(required = true, maxLength = 150)
	private String name;
	
	@DAOManaged(columnName = "form_type")
	@ManyToOne(autoGet = true)
	@XMLElement(name = "FormType")
	private FormType formType;
	
	@XMLElement(name = "editUrl")
	private String editUrl;
	
	@DAOManaged(columnName = "group_id")
	@XMLElement(name = "GroupID")
	private Integer groupID;
	
	@XMLElement(name = "GroupName")
	private String groupName;

	@DAOManaged
	@OneToOne(autoGet = true, autoAdd = true, autoUpdate = true)
	@XMLElement(name = "Questionnaire")
	private Questionnaire questionnaire;
		
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}

	public void setFormID(Integer formID) {
		this.formID = formID;
	}
		
	public Integer getFormID() {
		return formID;
	}
	
	public void setID(Integer formID) {
		this.formID = formID;
	}
	
	public FormType getFormType() {
		return formType;
	}
	
	public void setFormType(FormType type) {
		this.formType = type;
	}
	
	public Integer getGroupID() {
		return groupID;
	}
	
	public void setGroupID(Integer groupID) {
		this.groupID = groupID;
	}
	
	public String getGroupName() {
		return groupName;
	}

	public void setGroupName(String groupName) {
		this.groupName = groupName;
	}
	
	public Questionnaire getQuestionnaire() {
		return questionnaire;
	}
	
	public void setQuestionnaire(Questionnaire questionnaire) {
		this.questionnaire = questionnaire;
	}
	
	@Override
	public int compareTo(Form form) {

		String lhs_val = this.getTitle();
		String rhs_val = form.getTitle();
		
		int result = lhs_val.compareTo(rhs_val);
		
		return result;		
		
	}

	@Override
	public Element toXML(Document doc) {
		
		
//		if (this.questionnaire.getQuestionnaireValues() != null && this.questionnaire.getQuestionnaireValues().size() > 0) {
//			for (QuestionnaireValue attributeValue : this.questionnaire.getQuestionnaireValues()) {
//				
//				if (attributeValue.getNote() != null && attributeValue.getNote().trim() != "") {
//					this.hasNotes = true;
//					break;
//					
//				}
//				
//				if (attributeValue.getValue().equalsIgnoreCase("åtgärder krävs")) {
//					this.hasActionRequired = true;
//					break;
//					
//				}
//				
//			}
//			
//		}
		
		Element fileElement = super.toXML(doc);
		
		return fileElement;
		
	}
	
	@Override
	public String getID() {
		return this.formID.toString();
	}

	@Override
	public String getAlias() {
		return "viewform/" + this.formID;
	}

	@Override
	public String getTitle() {
		return this.name;
	}

	@Override
	public String getContentType() {
		return "text/html";
	}

	@Override
	public InputStream getData() throws Exception {
		String data = name;
		return StringUtils.getInputStream(data);
	}

	@Override
	public long getLastModified() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public AccessInterface getAccessInterface() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Map<String, ? extends Object> getAttributes() {
		// TODO Auto-generated method stub
		return null;
	}
	
}
