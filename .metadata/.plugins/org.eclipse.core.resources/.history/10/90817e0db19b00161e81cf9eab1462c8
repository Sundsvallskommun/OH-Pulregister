package main.java.se.sk.facilities.beans;

import java.io.InputStream;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.List;
import java.util.Map;


import org.w3c.dom.Document;
import org.w3c.dom.Element;

import se.unlogic.hierarchy.core.beans.User;
import se.unlogic.hierarchy.core.interfaces.AccessInterface;
import se.unlogic.hierarchy.core.interfaces.SearchableItem;
import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.ManyToMany;
import se.unlogic.standardutils.dao.annotations.ManyToOne;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.OneToOne;
import se.unlogic.standardutils.dao.annotations.SimplifiedRelation;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.date.DateStringyfier;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.string.StringUtils;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;
import se.unlogic.standardutils.xml.XMLUtils;

@Table(name = "facility_node")
@XMLElement
public class FacilityNode extends GeneratedElementable implements SearchableItem, Serializable {

	private static final long serialVersionUID = 5167465509406930594L;
	
	public static Field TYPE_RELATION = ReflectionUtils.getField(FacilityNode.class, "facilityNodeType");
	public static Field ATTRIBUTES_RELATION = ReflectionUtils.getField(FacilityNode.class, "facilityNodeAttributes");

	@DAOManaged(columnName = "node_id", autoGenerated = true)
	@Key
	@XMLElement
	private Integer node_id;
	
	@DAOManaged(columnName = "name")
	@XMLElement
	@WebPopulate(required = true, maxLength = 150)
	private String name;
	
	@DAOManaged(columnName = "parent_node")
	@XMLElement
	@WebPopulate(required = false)
	private Integer parent_node_id;

	
	@DAOManaged(columnName = "type")
	@ManyToOne(autoGet=true)
	@XMLElement	
	private FacilityNodeType facilityNodeType;
	
	@DAOManaged
	@OneToMany(autoGet=true,autoAdd=true,autoUpdate=true)
	@XMLElement	
	private List<FacilityNodeAttribute> facilityNodeAttributes;
	
	@DAOManaged(dontUpdateIfNull=true)
	@OneToMany(autoAdd=true,autoUpdate=true,autoGet=true)
	@XMLElement	
	private List<FacilityFile> facilityNodeFiles;
	
	@DAOManaged(dontUpdateIfNull=true)
	@OneToMany(autoGet=false)
	@XMLElement(name="geo",skipChildParentElement=true)	
	private List<FacilityGeoLocation> facilityGeoLocations;
	
	@DAOManaged
	@ManyToMany(linkTable="facility_node_tags",autoAdd=true,autoGet=true,autoUpdate=true)
	@XMLElement	
	private List<FacilityNodeTag> facilityNodeTags;
	
	public List<FacilityNodeTag> getFacilityNodeTags() {
		return facilityNodeTags;
	}

	public void setFacilityNodeTags(List<FacilityNodeTag> facilityNodeTags) {
		this.facilityNodeTags = facilityNodeTags;
	}

	public List<FacilityFile> getFacilityNodeFiles() {
		return facilityNodeFiles;
	}

	public void setFacilityNodeFiles(List<FacilityFile> facilityNodeFiles) {
		this.facilityNodeFiles = facilityNodeFiles;
	}

	public List<FacilityNodeAttribute> getFacilityNodeAttributes() {
		return facilityNodeAttributes;
	}

	public void setFacilityNodeAttributes(List<FacilityNodeAttribute> facilityNodeAttributes) {
		this.facilityNodeAttributes = facilityNodeAttributes;
	}

	public Integer getNode_id() {
		return node_id;
	}

	public void setNode_id(Integer node_id) {
		this.node_id = node_id;
	}
	

	public Integer getParent_node_id() {
		return parent_node_id;
	}

	public void setParent_node_id(Integer parent_node_id) {
		this.parent_node_id = parent_node_id;
	}

	public FacilityNodeType getFacility_node_type() {
		return facilityNodeType;
	}

	public void setFacility_node_type(FacilityNodeType facility_node_type) {
		this.facilityNodeType = facility_node_type;
	}
	
	public FacilityNodeAttribute getAttributeFromID( Integer attrID )
	{
		for ( FacilityNodeAttribute attr : this.facilityNodeAttributes)
		{
			if ( attr.getAttributeID().equals( attrID ) ) return attr;
		}
		return null;
	}
	
	@Override
	public Element toXML(Document doc) {

		Element fileElement = super.toXML(doc);		
		/*
		if ( this.facilityNodeAttributes != null )
		{
			for ( FacilityNodeAttribute i : this.facilityNodeAttributes )
			{
				fileElement.appendChild(i.toXML(doc));			
			}
		}
		*/

		return fileElement;
	}
	

	@Override
	public String getID() 
	{
		return this.node_id.toString();		
	}

	@Override
	public String getAlias() {

		return "viewfacility/" + this.node_id;		
	}

	@Override
	public String getTitle() {

		return this.name;
	}
	
	@Override
	public String getContentType() {

		return "text/html";
	}

	@Override
	public InputStream getData() throws Exception {
		
		String data = name;

		return StringUtils.getInputStream(data);		
	}

	@Override
	public long getLastModified() {

		return 0;
	}

	@Override
	public AccessInterface getAccessInterface() {

		return null;
	}

	@Override
	public Map<String, ? extends Object> getAttributes() {

		return null;
	}

	public List<FacilityGeoLocation> getFacilityGeoLocations() {
		return facilityGeoLocations;
	}

	public void setFacilityGeoLocations(List<FacilityGeoLocation> facilityGeoLocations) {
		this.facilityGeoLocations = facilityGeoLocations;
	}	

	
}
